<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB学习笔记</title>
      <link href="/posts/a36562d7.html"/>
      <url>/posts/a36562d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><p>[TOC]</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>MongoDB为非关系型数据库 （no sql , not only sql）</li><li>为快速开发互联网web应用而设计的数据库系统</li><li>MongoDB的设计目的是极简、灵活、作为web应用栈的一部分。</li><li>MongoDB的数据模型是面向文档的，所谓文档是一种类似于JSON的结构，简单理解MongoDB这个数据库中存的是各种各样的JSON。(BSON )</li><li>默认端口27017</li></ul><h2 id="下载安装与配置环境启动"><a href="#下载安装与配置环境启动" class="headerlink" title="下载安装与配置环境启动"></a>下载安装与配置环境启动</h2><p><a href="https://www.mongodb.com/try/download/community2">下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>windows直接下一步到底 doge</p><p><strong>linux：</strong></p><h3 id="配置环境启动"><a href="#配置环境启动" class="headerlink" title="配置环境启动"></a>配置环境启动</h3><h4 id="windows配置环境变量"><a href="#windows配置环境变量" class="headerlink" title="windows配置环境变量"></a>windows配置环境变量</h4><p>1.将bin目录添加到path中</p><p>2.cmd中可以运行mongod</p><p>3.<code>mongod --dbpath ***</code>修改数据库路径</p><p>4.<code>mongod --port</code>  修改端口</p><h2 id="MongoDB基本使用"><a href="#MongoDB基本使用" class="headerlink" title="MongoDB基本使用"></a>MongoDB基本使用</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><ul><li>show dbs 显示所有数据库</li><li>use 数据库名   进入指定数据库</li><li>db   显示当前数据库</li><li>show collections  显示当前数据库中所有集合</li></ul><h3 id="增删改查CRUD"><a href="#增删改查CRUD" class="headerlink" title="增删改查CRUD"></a>增删改查CRUD</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p><code>db.&lt;collection&gt;.insert(doc)</code>向集合中插入一个文档</p><p>例如：</p><p><code>db.stus.insert (fname:&quot;孙悟空&quot; , age: 18,gender:&quot;男&quot;)</code></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><code>db.&lt;collection&gt;.find()</code></p><h2 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h2><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><p><code>pip install pymongo</code></p><h3 id="创建MongoDB连接"><a href="#创建MongoDB连接" class="headerlink" title="创建MongoDB连接"></a>创建MongoDB连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment"># 连接数据库方法一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mongodb_init01</span>():</span><br><span class="line">    mongo =pymongo.MongoClient(host=<span class="string">&#x27;&#x27;</span>,post=<span class="number">27017</span>,tz_aware=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mongodb_init02</span>():</span><br><span class="line">    url = <span class="string">&quot;host=&#x27;&#x27;,post=27017&quot;</span></span><br><span class="line">    mongo = pymongo.MongoClient(url,tz_aware=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_db</span>():</span><br><span class="line">    <span class="comment">#创建或者选择数据库</span></span><br><span class="line">    db = mongo.test           <span class="comment">#创建一个库连接</span></span><br><span class="line">    db.user.insert(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;) <span class="comment"># 加入数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除数据库</span></span><br><span class="line">    mongo.drop_database(db) <span class="comment"># 将上面创建的db库删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取数据库</span></span><br><span class="line">    mongo.list_database_names()  <span class="comment">#获取所有数据库</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="操作集合"><a href="#操作集合" class="headerlink" title="操作集合"></a>操作集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_collection</span>():</span><br><span class="line">    <span class="comment"># 获取数据库（没有自动创建 创建前提数据库中加集合）</span></span><br><span class="line">    db = mongo.test2</span><br><span class="line">    <span class="comment"># 创建集合</span></span><br><span class="line">    col = db.create_collection(<span class="string">&#x27;col&#x27;</span>)  <span class="comment"># 如果集合存在报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取一个集合</span></span><br><span class="line">    <span class="comment"># col = db.get_collection(&#x27;col&#x27;) #获取集合，如果没有会自动创建集合</span></span><br><span class="line">    col =db.col <span class="comment">#获取集合，如果没有会自动创建集合</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取所有集合名称</span></span><br><span class="line">    mongo.test2.list_collection_names()</span><br><span class="line">    <span class="comment"># 获取所有集合对象</span></span><br><span class="line">    mongo.test2.list_collections()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除集合</span></span><br><span class="line">    db.drop_collection(<span class="string">&#x27;col&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="操作索引"><a href="#操作索引" class="headerlink" title="操作索引"></a>操作索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_index</span>():</span><br><span class="line">    <span class="comment"># 获取集合</span></span><br><span class="line">    user = mongo.test.user</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建索引 默认正序 名字默认是属性_1</span></span><br><span class="line">    i = user.create_index(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建索引 添加排序规则</span></span><br><span class="line">    i = user.create_index([(<span class="string">&#x27;name&#x27;</span>,pymongo.DESCENDING)])  <span class="comment"># 倒叙</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建多个索引</span></span><br><span class="line">    user_id_index =IndexModel([(<span class="string">&#x27;user_id&#x27;</span>,pymongo.ASCENDTING)],unique=TRUE)</span><br><span class="line">    name_index = IndexModel([(<span class="string">&#x27;name&#x27;</span>,pymongo.DESCENDING)])</span><br><span class="line">    r = users.create_indexes([user_id_index,name_index]) <span class="comment"># 返回索引名称的list</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除索引</span></span><br><span class="line">    user.drop_indexes()</span><br></pre></td></tr></table></figure><h3 id="操作文档"><a href="#操作文档" class="headerlink" title="操作文档"></a>操作文档</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_document</span>():</span><br><span class="line">    <span class="comment"># 创建数据库与集合</span></span><br><span class="line">    col = mongo.test.col</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加数据</span></span><br><span class="line">    col.insert(&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 插入多条数据</span></span><br><span class="line">    user1 = &#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">    user2 = &#123;<span class="string">&quot;_id&quot;</span>:<span class="number">2</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;25&quot;</span>&#125;</span><br><span class="line">    col.insert_naby([user1,user2])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改数据</span></span><br><span class="line">    <span class="comment"># 修改单条数据</span></span><br><span class="line">    user1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">    upt = col.update_one(<span class="built_in">filter</span>=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>&#125;,update=&#123;<span class="string">&quot;$set&quot;</span>:user&#125;)     <span class="built_in">print</span>(upt.acknowledged,upt.matched_count,upt.modifined_count,</span><br><span class="line">                                                                                       upt.raw_result,upt.upserted_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    del_u =col.delete_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>&#125;) <span class="comment"># 删除zhangsa</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取集合</span></span><br><span class="line">mongo = pymongo.MongoClient(host=<span class="string">&#x27;&#x27;</span>,post=<span class="number">27017</span>,tz_aware=<span class="literal">True</span>)</span><br><span class="line">db = mongo.get_database(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">user = db.get_collection(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">password = db.get_collection(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">document</span>):</span><br><span class="line">    <span class="comment"># 显示所有数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> document:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_and</span>():</span><br><span class="line">    <span class="comment"># and操作</span></span><br><span class="line">    r =db.user.find(&#123;</span><br><span class="line">        <span class="string">&quot;$and&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">3</span>,<span class="string">&quot;$lte&quot;</span>:<span class="number">4</span>&#125;&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">    show(r)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_or</span>():</span><br><span class="line">    <span class="comment"># or操作</span></span><br><span class="line">    r = db.user.find(&#123;</span><br><span class="line">        <span class="string">&quot;$or&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">0</span>,<span class="string">&quot;$lte&quot;</span>:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;_id&quot;</span>: &#123;<span class="string">&quot;$lte&quot;</span>:<span class="number">4</span>&#125;&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;tianqi&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">    show(r)</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="MongoDBCompass使用"><a href="#MongoDBCompass使用" class="headerlink" title="MongoDBCompass使用"></a>MongoDBCompass使用</h2>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript入门</title>
      <link href="/posts/3da79d5b.html"/>
      <url>/posts/3da79d5b.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript入门"><a href="#JavaScript入门" class="headerlink" title="JavaScript入门"></a>JavaScript入门</h1><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>火狐浏览器内置的 Web 控制台非常适合学习 JavaScript,Web 控制台包含两个输入模式——单行模式、多行模式。</p><p>可直接使用文本编辑器进行代码编写。 如：VSCode</p><h2 id="单行模式"><a href="#单行模式" class="headerlink" title="单行模式"></a>单行模式</h2><p>在火狐浏览器菜单栏的 “工具” =&gt; “浏览器工具” =&gt; “Web 开发者工具”( 在 Windows 和 Linux 上Ctrl+Shift+I ，Mac 上Cmd+Option+K)，选择”Web 开发者工具栏”的控制台选项卡，它会如期出现在浏览器窗口的底部。如图，最下一行就是可以执行输入的命令行，面板上可以显示执行结果：</p><p><img src="C:\Users\D3Rtu\AppData\Roaming\Typora\typora-user-images\image-20220921002840464.png" alt="image-20220921002840464"></p><p>控制台的工作方式与 eval 完全相同：返回最后输入的表达式。为了简单起见，可以想象每次输入到控制台的东西实际上都被 console.log 所包围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(<span class="string">&#x27;3 + 5&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="多行模式"><a href="#多行模式" class="headerlink" title="多行模式"></a>多行模式</h2><p>Web 控制台的单行模式非常适合用来测试单个的 JavaScript 表达式，对于复杂的 JavaScript 表达式或者一定规模的代码块就显得力不从心了。这正是多行模式要解决的！</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">greetMe</span>(<span class="params">yourName</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + yourName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greetMe</span>(<span class="string">&#x27;World&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>输入完成后，按下Cmd+Enter或者Ctrl+Enter(或者单击运行按钮) 就可以在浏览器中看到执行结果了！</p><p>在接下来的章节里，我们将向你介绍 JavaScript 的语法以及语言特性，届时你将可以使用它编写更加复杂的程序。</p><p>但是现在请记住，始终将 <code>(function()&#123;&quot;use strict&quot;;</code> 添加到你的代码之前，始终将<code>&#125;)();</code>添加到你的代码之后。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE">IIFE</a>这两篇文章详细解释了它们的作用。现在关于它们的作用你只要知道以下两点：</p><ol><li>防止 JavaScript 的语义影响初学者</li><li>防止控制台中的代码片段之间发生意料之外的交互</li></ol><p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。</p><p>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。</p><p>“use strict” 的目的是指定代码在严格条件下执行。</p><p>严格模式下你不能使用未声明的变量。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title function_">myFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    y = <span class="number">3.14</span>;   <span class="comment">// 报错 (y 未定义)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">3.14</span>;       <span class="comment">// 不报错</span></span><br><span class="line"><span class="title function_">myFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    y = <span class="number">3.14</span>;   <span class="comment">// 报错 (y 未定义)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript简介</title>
      <link href="/posts/c21cf4c6.html"/>
      <url>/posts/c21cf4c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript 是一门跨平台、面向对象的脚本语言，它能使网页可交互（例如拥有复杂的动画，可点击的按钮，通俗的菜单等）。另外还有高级的服务端 Javascript 版本，例如 Node.js，它可以让你在网页上添加更多功能，不仅仅是下载文件（例如在多台电脑之间的协同合作）。在宿主环境（例如 web 浏览器）中， JavaScript 能够通过其所连接的环境提供的编程接口进行控制。</p><p>JavaScript 内置了一些对象的标准库，比如数组（Array），日期（Date），数学（Math）和一套核心语句，包括运算符、流程控制符以及声明方式等。JavaScript 的核心部分可以通过添加对象来扩展语言以适应不同用途；例如：</p><ul><li>客户端的 JavaScript 通过提供对象，控制浏览器及其文档对象模型（DOM），来扩展语言核心。例如：客户端的拓展代码允许应用程序将元素放在某个 HTML 表单中，并且支持响应用户事件，比如鼠标点击、表单提交和页面导航。</li><li>__服务端的 JavaScript 则通过提供有关在服务器上运行 JavaScript 的对象来可扩展语言核心。例如：服务端版本直接支持应用和数据库通信，提供应用不同调用间的信息连续性，或者在服务器上执行文件操作。</li></ul><p>这意味着，在浏览器中，JavaScript 可以改变网页（DOM）的外观与样式。同样地，在服务器上，Node.js 中的 JavaScript 可以对浏览器上编写的代码发出的客户端请求做出响应。</p><h2 id="JavaScript与Java"><a href="#JavaScript与Java" class="headerlink" title="JavaScript与Java"></a>JavaScript与Java</h2><p>JavaScript 和 Java 有一些共性但是在另一些方面有着根本性区别。JavaScript 语言类似 Java 但是并没有  Java 的静态类型和强类型检查特性。JavaScript 遵循了 Java 的表达式语法，命名规范以及基础流程控制，这也是  JavaScript 从 LiveScript 更名的原因。</p><p>与 Java 通过声明的方式构建类的编译时系统不同，JavaScript  采用基于少量的数据类型如数字、布尔、字符串值的运行时系统。JavaScript  拥有基于原型的对象模型提供的动态继承；也就是说，独立对象的继承是可以改变的。 JavaScript 支持匿名函数。  函数也可以作为对象的属性被当做宽松的类型方式执行。</p><p>与 Java 相比，Javascript 是一门形式自由的语言。你不必声明所有的变量，类和方法。你不必关心方法是否是公有、私有或者受保护的，也不需要实现接口。无需显式指定变量、参数、方法返回值的数据类型。</p><p>Java 是基于类的编程语言，设计的初衷就是为了确保快速执行和类型安全。类型安全，举个例子，你不能将一个 Java  整数变量转化为一个对象引用，或者由 Java 字节码访问专有存储器。Java 基于类的模型，意味着程序包含专有的类及其方法。Java  的类继承和强类型要求紧耦合的对象层级结构。这些要求使得 Java 编程比 JavaScript 要复杂的多。</p><p>相比之下，JavaScript 传承了 HyperTalk 和 dBASE 语句精简、动态类型等精髓，这些脚本语言为更多开发者提供了一种语法简单、内置功能强大以及用最小需求创建对象的编程工具。</p><div class="table-container"><table><thead><tr><th>JavaScript</th><th>Java</th></tr></thead><tbody><tr><td>面向对象。不区分对象类型。通过原型机制继承，任何对象的属性和方法均可以被动态添加。</td><td>基于类系统。分为类和实例，通过类层级的定义实现继承。不能动态增加对象或类的属性或方法。</td></tr><tr><td>变量类型不需要提前声明 (动态类型)。</td><td>变量类型必须提前声明 (静态类型)。</td></tr><tr><td>不能直接自动写入硬盘。</td><td>可以直接自动写入硬盘。</td></tr></tbody></table></div><h2 id="JavaScript-和-ECMAScript-规范"><a href="#JavaScript-和-ECMAScript-规范" class="headerlink" title="JavaScript 和 ECMAScript 规范"></a>JavaScript 和 ECMAScript 规范</h2><p>JavaScript 的标准化组织是 <a href="https://www.ecma-international.org/">ECMA</a> ——这个欧洲信息与通信系统标准化协会提供基于 Javascript 的标准化方案（ECMA  原先是欧洲计算机制造商协会的首字母缩写）。这种标准化版本的 JavaScript 被称作  ECMAScript，在所有支持该标准的应用中以相同的方式工作。公司可以使用开放标准语言来开发他们自己的 JavaScript  实现版本。ECMAScript 标准在 ECMA－262 规范中进行文档化。 参照 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript">JavaScript 的新特性</a> 以便学习更多关于不同版本的 JavaScript 和 ECMAScript 规范版本。</p><p>ECMA-262 标准也通过了 国际标准化组织（<a href="http://www.iso.ch/">ISO</a>）的 ISO-16262。你可以<a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm">在这里</a>找到该规范文件。 ECMAScript 规范并没有描述文档对象模型（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">DOM</a>），该模型由 万维网联盟（<a href="https://www.w3.org/">W3C</a>） 制定。DOM 定义了 HTML 文件对象被脚本操作的方法。为了更清楚地了解当使用 JavaScript 编程时用到的不同技术，请参阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">JavaScript 技术概述</a>。</p><h2 id="JavaScript-文献-和-ECMAScript-规范"><a href="#JavaScript-文献-和-ECMAScript-规范" class="headerlink" title="JavaScript 文献 和 ECMAScript 规范"></a>JavaScript 文献 和 ECMAScript 规范</h2><p>ECMAScript 规范是实现 ECMAScript 的一组需求;如果您想在 ECMAScript 实现或引擎 (如 Firefox 中的 SpiderMonkey 或 Chrome 中的 V8) 中实现符合标准的语言特性，那么它是非常有用的。</p><p>ECMAScript 文档不是用来帮助脚本程序员的;使用 JavaScript 文档获取关于编写脚本的信息。</p><p>ECMAScript 规范使用了 JavaScript 程序员可能不熟悉的术语和语法。尽管 ECMAScript 中对语言的描述可能有所不同，但语言本身保持不变。JavaScript 支持 ECMAScript 规范中列出的所有功能。</p><p>JavaScript 文档描述了适合 JavaScript 程序员的语言方面。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript语法和数据类型</title>
      <link href="/posts/4eb674ba.html"/>
      <url>/posts/4eb674ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript语法和数据类型"><a href="#JavaScript语法和数据类型" class="headerlink" title="JavaScript语法和数据类型"></a>JavaScript语法和数据类型</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>JavaScript 借鉴了 Java 的大部分语法，但同时也受到 <em>Awk，Perl</em> 和 <em>Python</em>的影响。</p><p>JavaScript 是<strong>区分大小写</strong>的，并使用 <strong>Unicode</strong> 字符集。举个例子，可以将单词 Früh（在德语中意思是“早”）用作变量名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Fr</span>üh = <span class="string">&quot;foobar&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是，由于 JavaScript 是大小写敏感的，因此变量 <code>früh</code> 和 <code>Früh</code> 则是两个不同的变量。</p><p>在 JavaScript 中，指令被称为语句（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Statement">Statement</a>），并用分号（;）进行分隔。</p><p>如果一条语句独占一行的话，那么分号是可以省略的。（译者注：并不建议这么做。）但如果一行中有多条语句，那么这些语句必须以分号分开。</p><p><strong>备注：</strong> ECMAScript 规定了在语句的末尾自动插入分号（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#自动分号补全">ASI</a>）。（如果想要了解更多信息，请参阅 JavaScript <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar">词法语法</a> 。）</p><p>虽然不是必需的，但是在一条语句的末尾加上分号是一个很好的习惯。这个习惯可以大大减少代码中产生 bug 的可能性。</p><p>Javascript 源码从左往右被扫描并转换成一系列由 token 、控制字符、行终止符、注释和空白字符组成的输入元素。空白字符指的是空格、制表符和换行符等。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><strong>Javascript 注释</strong>的语法和 C++ 或许多其他语言类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这是一个更长的，</span></span><br><span class="line"><span class="comment">   多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 然而，你不能，/* 嵌套注释 */</span> 语法错误 */</span><br></pre></td></tr></table></figure><p>在代码执行过程中，注释将被自动跳过（不执行）。</p><p><strong>备注：</strong> 你可能会在一些 JavaScript 脚本中见到像这样<code>#!/usr/bin/env node</code>的第三种注释</p><p>这种注释我们称为<strong>hashbang 注释 (hashbang comment)</strong>，这种注释被用来指定执行 JaveScript 脚本的引擎的路径，查看这篇文章来了解更详细的信息：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#hashbang_注释">Hashbang 注释</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>JavaScript 有三种声明方式。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var"><code>var</code></a></p><p>​    声明一个变量，可选初始化一个值。  </p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let"><code>let</code></a></p><p>​    声明一个块作用域的局部变量，可选初始化一个值。  </p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  <span class="comment">// expected output: 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name1 [= value1] [, name2 [= value2]] [, ..., nameN [= valueN];</span><br></pre></td></tr></table></figure><pre><code>### 参数</code></pre><ul><li><p><code>nameN</code></p><p>​    要声明的一个或多个变量的名称，必须是合法的标识符。  </p></li><li><p><code>valueN</code> 可选</p><p>​    变量的初始值，可以是任意合法的表达式。  </p></li></ul><p>另外，也可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a>语法来声明变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar &#125; = foo; <span class="comment">// where foo = &#123; bar:10, baz:12 &#125;;</span></span><br><span class="line"><span class="comment">/* 创建一个名为 &#x27;bar&#x27; 的变量，其值为 10 */</span></span><br></pre></td></tr></table></figure><p>​    </p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const"><code>const</code></a></p><p>​    声明一个块作用域的只读常量。  </p><p>​    const声明一个只读的常量 。一旦声明， 常量的值就不能改变</p><p>​    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415</span>;</span><br><span class="line"><span class="variable constant_">PI</span> <span class="comment">// 3.1415</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在应用程序中，使用变量来作为值的符号名。变量的名字又叫做<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Identifier">标识符</a>，其需要遵守一定的规则。</p><p>一个 JavaScript 标识符必须以字母、下划线（_）或者美元符号（$）开头；后续的字符也可以是数字（0-9）。因为 JavaScript 语言是区分大小写的，所以字母可以是从“A”到“Z”的大写字母和从“a”到“z”的小写字母。</p><p>你可以使用大部分 ISO 8859-1 或 Unicode 编码的字符作标识符，例如 å 和 ü（详情可查看<a href="https://mathiasbynens.be/notes/javascript-identifiers-es6">这篇博客文章</a>）。你也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals">Unicode 转义字符</a> 作标识符。</p><p>合法的标识符示例：<code>Number_hits</code>，<code>temp99</code>，<code>$credit</code> 和 <code>_name</code>。</p><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>你可以用以下三种方式声明变量：</p><ul><li>使用关键词 <code>var</code> 。例如 <code>var x = 42</code>。这个语法可以用来声明局部变量和全局变量。</li><li>直接赋值。例如<code>x = 42</code>。在函数外使用这种形式赋值，会产生一个全局变量。在严格模式下会产生错误。因此你不应该使用这种方式来声明变量。</li><li>使用关键词 <code>let</code> 。例如 <code>let y = 13</code>。这个语法可以用来声明块作用域的局部变量。參考下方<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#变量的作用域">变量的作用域 (Variable scope)</a> 。</li></ul><p>你可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a>将<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#对象字面量_object_literals">对象字面量</a>的属性绑定到变量。就像这样<code>let &#123; bar &#125; = foo</code>。这会创建一个名为<code>bar</code>的变量，并且将<code>foo</code>对像中属性名与之相同的属性的值赋给它。</p><p>你也可以直接给属性赋值。像这样<code>x = 42</code>。这种声明方式将会创建一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var#描述">未声明全局变量</a>。这样做还会产生 JavaScript 警告。因为未声明的全局变量常常导致预期之外的行为，所以不建议使用。</p><h3 id="变量求值"><a href="#变量求值" class="headerlink" title="变量求值"></a>变量求值</h3><p>用 <code>var</code> 或 <code>let</code> 语句声明的变量，如果没有赋初始值，则其值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p><p>如果访问一个未声明的变量会导致抛出一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError"><code>引用错误</code></a>（ReferenceError）异常：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The value of a is &quot;</span> + a); <span class="comment">// a 的值是 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The value of b is &quot;</span> + b);<span class="comment">// b 的值是 undefined</span></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="comment">// 在你阅读下面的‘变量声明提升’前你可能会疑惑</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The value of c is &quot;</span> + c); <span class="comment">// 未捕获的引用错误： c 未被定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The value of x is &quot;</span> + x); <span class="comment">// x 的值是 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The value of y is &quot;</span> + y);<span class="comment">// 未捕获的引用错误： y 未被定义</span></span><br><span class="line"><span class="keyword">let</span> y;</span><br></pre></td></tr></table></figure><p>你可以使用 <code>undefined</code> 来判断一个变量是否已赋值。在以下的代码中，变量<code>input</code>未被赋值，因此 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else">if (en-US)</a> 条件语句的求值结果是 <code>true</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input;</span><br><span class="line"><span class="keyword">if</span>(input === <span class="literal">undefined</span>)&#123;</span><br><span class="line">  <span class="title function_">doThis</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">doThat</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>undefined</code> 值在布尔类型环境中会被当作 <code>false</code> 。例如，下面的代码将会执行函数 <code>myFunction</code>，因为数组 <code>myArray</code> 中的元素未被赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [];</span><br><span class="line"><span class="keyword">if</span> (!myArray[<span class="number">0</span>])   <span class="title function_">myFunction</span>();</span><br></pre></td></tr></table></figure><p>数值类型环境中 <code>undefined</code> 值会被转换为 <code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a + <span class="number">2</span>;    <span class="comment">// 计算为 NaN</span></span><br></pre></td></tr></table></figure><p>当你对一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a> 变量求值时，空值 <code>null</code> 在数值类型环境中会被当作 0 来对待，而布尔类型环境中会被当作 <code>false</code>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n * <span class="number">32</span>); <span class="comment">// 在控制台中会显示 0</span></span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在函数之外声明的变量，叫做<em>全局</em>变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做<em>局部</em>变量，因为它只能在当前函数的内部访问。</p><p>ECMAScript 6 之前的 JavaScript 没有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_statement">语句块</a> 作用域；相反，语句块中声明的变量将成为语句块所在函数（或全局作用域）的局部变量。例如，如下的代码将在控制台输出 5，因为 <code>x</code> 的作用域是声明了 <code>x</code> 的那个函数（或全局范围），而不是 <code>if</code> 语句块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>如果使用 ECMAScript 6 中的 <code>let</code> 声明，上述行为将发生变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// ReferenceError: y 没有被声明</span></span><br></pre></td></tr></table></figure><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>JavaScript 变量的另一个不同寻常的地方是，你可以先使用变量稍后再声明变量而不会引发异常。这一概念称为变量提升；JavaScript  变量感觉上是被“提升”或移到了函数或语句的最前面。但是，提升后的变量将返回 undefined  值。因此在使用或引用某个变量之后进行声明和初始化操作，这个被提升的变量仍将返回 undefined 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例子 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例子 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// will return a value of undefined</span></span><br><span class="line"><span class="keyword">var</span> myvar = <span class="string">&quot;my value&quot;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myvar); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> myvar = <span class="string">&quot;local value&quot;</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>也可写作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例子 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例子 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> myvar = <span class="string">&quot;my value&quot;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> myvar;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myvar); <span class="comment">// undefined</span></span><br><span class="line">  myvar = <span class="string">&quot;local value&quot;</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数表达式 */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">// 类型错误：baz 不是一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar2&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>实际上，全局变量是<em>全局对象</em>的属性。在网页中，（译注：缺省的）全局对象是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>window</code></a> ，所以你可以用形如 <code>window.</code><em><code>variable</code> </em>的语法来设置和访问全局变量。</p><p>因此，你可以通过指定 window 或 frame 的名字，在当前 window 或 frame 访问另一个 window 或 frame 中声明的变量。例如，在文档里声明一个叫 <code>phoneNumber</code> 的变量，那么你就可以在子框架里使用 <code>parent.phoneNumber</code> 的方式来引用它</p><h3 id="常量-Constants"><a href="#常量-Constants" class="headerlink" title="常量 (Constants)"></a>常量 (Constants)</h3><p>你可以用关键字 <code>const</code> 创建一个只读的常量。常量标识符的命名规则和变量相同：必须以字母、下划线（_）或美元符号（$）开头并可以包含有字母、数字或下划线。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>常量不可以通过重新赋值改变其值，也不可以在代码运行时重新声明。它必须被初始化为某个值。</p><p>常量的作用域规则与 <code>let</code> 块级作用域变量相同。若省略<code>const</code>关键字，则该标识符将被视为变量。</p><p>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。</p><p>对象属性被赋值为常量是不受保护的，所以下面的语句执行时不会产生错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MY_OBJECT</span> = &#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;value&quot;</span>&#125;;</span><br><span class="line"><span class="variable constant_">MY_OBJECT</span>.<span class="property">key</span> = <span class="string">&quot;otherValue&quot;</span>;</span><br></pre></td></tr></table></figure><p>同样的，数组的被定义为常量也是不受保护的，所以下面的语句执行时也不会产生错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MY_ARRAY</span> = [<span class="string">&#x27;HTML&#x27;</span>,<span class="string">&#x27;CSS&#x27;</span>];</span><br><span class="line"><span class="variable constant_">MY_ARRAY</span>.<span class="title function_">push</span>(<span class="string">&#x27;JAVASCRIPT&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">MY_ARRAY</span>); <span class="comment">//logs [&#x27;HTML&#x27;,&#x27;CSS&#x27;,&#x27;JAVASCRIPT&#x27;];</span></span><br></pre></td></tr></table></figure><h2 id="数据结构和类型"><a href="#数据结构和类型" class="headerlink" title="数据结构和类型"></a>数据结构和类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>最新的 ECMAScript 标准定义了 8 种数据类型：</p><ul><li>七种基本数据类型：    <ul><li>布尔值（Boolean），有 2 个值分别是：<code>true</code> 和 <code>false</code>.</li><li>null ， 一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，因此 <code>null</code> 与 <code>Null</code>、<code>NULL</code>或变体完全不同。</li><li>undefined ，和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性。</li><li>数字（Number），整数或浮点数，例如： <code>42</code> 或者 <code>3.14159</code>。</li><li>任意精度的整数 (BigInt) ，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。</li><li>字符串（String），字符串是一串表示文本值的字符序列，例如：”Howdy” 。</li><li>代表（Symbol）( 在 ECMAScript 6 中新添加的类型).。一种实例是唯一且不可改变的数据类型。</li></ul></li><li>以及对象（Object）。</li></ul><p>虽然这些数据类型相对来说比较少，但是通过他们你可以在程序中开发有用的功能。对象（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">Objects</a>）和函数（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">functions</a>）是这门语言的另外两个基本元素。你可以把对象当作存放值的一个命名容器，然后将函数当作你的程序能够执行的步骤。</p><h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><p>JavaScript 是一种动态类型语言 (dynamically typed language)。这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。因此，你可以按照如下方式来定义变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>然后，你还可以给同一个变量赋予一个字符串值，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer = <span class="string">&quot;Thanks for all the fish...&quot;</span>;</span><br></pre></td></tr></table></figure><p>因为 JavaScript 是动态类型的，这种赋值方式并不会提示出错。</p><h3 id="数字转换字符串"><a href="#数字转换字符串" class="headerlink" title="数字转换字符串"></a>数字转换字符串</h3><p>在包含的数字和字符串的表达式中使用加法运算符（+），JavaScript 会把数字转换成字符串。例如，观察以下语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;The answer is &quot;</span> + <span class="number">42</span> <span class="comment">// &quot;The answer is 42&quot;</span></span><br><span class="line">y = <span class="number">42</span> + <span class="string">&quot; is the answer&quot;</span> <span class="comment">// &quot;42 is the answer&quot;</span></span><br></pre></td></tr></table></figure><p>在涉及其它运算符（译注：如下面的减号’-‘）时，JavaScript 语言不会把数字变为字符串。例如（译注：第一例是数学运算，第二例是字符串运算）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;37&quot;</span> - <span class="number">7</span> <span class="comment">// 30</span></span><br><span class="line"><span class="string">&quot;37&quot;</span> + <span class="number">7</span> <span class="comment">// &quot;377&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字符串转换为数字"><a href="#字符串转换为数字" class="headerlink" title="字符串转换为数字"></a>字符串转换为数字</h3><p>有一些方法可以将内存中表示一个数字的字符串转换为对应的数字。</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt() (en-US)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"><code>parseFloat()</code></a></li></ul><p><code>parseInt</code> 方法只能返回整数，所以使用它会丢失小数部分。另外，调用 parseInt 时最好总是带上进制 (radix) 参数，这个参数用于指定使用哪一种进制。</p><p>将字符串转换为数字的另一种方法是使用一元<strong>加法运算符</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;1.1&quot;</span> + <span class="string">&quot;1.1&quot;</span> = <span class="string">&quot;1.11.1&quot;</span></span><br><span class="line">(+<span class="string">&quot;1.1&quot;</span>) + (+<span class="string">&quot;1.1&quot;</span>) = <span class="number">2.2</span></span><br><span class="line"><span class="comment">// 注意：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></figure><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>（译注：字面量是由语法表达式定义的常量；或，通过由一定字词组成的语词表达式定义的常量）</p><p>在 JavaScript 中，你可以使用各种字面量。这些字面量是脚本中按字面意思给出的固定的值，而不是变量。（译注：字面量是常量，其值是固定的，而且在程序脚本运行中不可更改，比如<em>false</em>，3.1415，thisIsStringOfHelloworld，invokedFunction: myFunction(“myArgument”)。本节将介绍以下类型的字面量：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#数组字面量_array_literals">数组字面量 (Array literals)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#布尔字面量_boolean_literals">布尔字面量 (Boolean literals)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#数字字面量_numeric_literals">数字字面量 (Numeric_literals)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#对象字面量_object_literals">对象字面量 (Object literals)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#regexp_字面值">RegExp 字面值</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#字符串字面量_string_literals">字符串字面量 (String literals)</a></li></ul><h3 id="数组字面量-Array-literals"><a href="#数组字面量-Array-literals" class="headerlink" title="数组字面量 (Array literals)"></a>数组字面量 (Array literals)</h3><p>数组字面值是一个封闭在方括号对 ([]) 中的包含有零个或多个表达式的列表，其中每个表达式代表数组的一个元素。当你使用数组字面值创建一个数组时，该数组将会以指定的值作为其元素进行初始化，而其长度被设定为元素的个数。</p><p>下面的示例用 3 个元素生成数组<code>coffees</code>，它的长度是 3。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coffees = [<span class="string">&quot;French Roast&quot;</span>, <span class="string">&quot;Colombian&quot;</span>, <span class="string">&quot;Kona&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="number">0</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>备注：</strong> 这里的数组字面值也是一种对象初始化器。参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#using_object_initializers">对象初始化器的使用</a>。</p><p>若在顶层（全局）脚本里用字面值创建数组，JavaScript 语言将会在每次对包含该数组字面值的表达式求值时解释该数组。另一方面，在函数中使用的数组，将在每次调用函数时都会被创建一次。</p><p>数组字面值同时也是数组对象。有关数组对象的详情请参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide#array_object">数组对象</a>一文。</p><h4 id="数组字面值中的多余逗号"><a href="#数组字面值中的多余逗号" class="headerlink" title="数组字面值中的多余逗号"></a>数组字面值中的多余逗号</h4><p>译注：声明时）你不必列举数组字面值中的所有元素。若你在同一行中连写两个逗号（,），数组中就会产生一个没有被指定的元素，其初始值是<code>undefined</code>。以下示例创建了一个名为<code>fish</code>的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fish = [<span class="string">&quot;Lion&quot;</span>, , <span class="string">&quot;Angel&quot;</span>];</span><br></pre></td></tr></table></figure><p>在这个数组中，有两个已被赋值的元素，和一个空元素（fish[0] 是”Lion”，fish[1] 是 undefined，而 fish[2] 是”Angel”；译注：此时数组的长度属性 fish.length 是 3)。</p><p>如果你在元素列表的尾部添加了一个逗号，它将会被忽略。在下面的例子中，数组的长度是 3，并不存在 myList[3]  这个元素（译注：这是指数组的第 4 个元素噢，作者是在帮大家复习数组元素的排序命名方法）。元素列表中其它所有的逗号都表示一个新元素（的开始）。</p><p><strong>备注：</strong> 尾部的逗号在早期版本的浏览器中会产生错误，因而编程时的最佳实践方式就是移除它们。</p><p>(译注：而“现代”的浏览器似乎鼓励这种方式，这也很好解释原因。尾部逗号可以减少向数组的最后添加元素时，因为忘记为这最后一个元素加逗号 所造成的错误。)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList = [<span class="string">&#x27;home&#x27;</span>, , <span class="string">&#x27;school&#x27;</span>, ];</span><br></pre></td></tr></table></figure><p>在下面的例子中，数组的长度是 4，元素<code>myList[0]</code>和<code>myList[2]</code>缺失（译注：没被赋值，因而是 undefined）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList = [ , <span class="string">&#x27;home&#x27;</span>, , <span class="string">&#x27;school&#x27;</span>];</span><br></pre></td></tr></table></figure><p><img src="C:\Users\D3Rtu\AppData\Roaming\Typora\typora-user-images\image-20220922010540327.png" alt="image-20220922010540327"></p><p>再看一个例子。在这里，该数组的长度是 4，元素<code>myList[1]</code>和<code>myList[3]</code>被漏掉了。（但是）只有最后的那个逗号被忽略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myList = [<span class="string">&#x27;home&#x27;</span>, , <span class="string">&#x27;school&#x27;</span>, , ];</span><br></pre></td></tr></table></figure><p><img src="C:\Users\D3Rtu\AppData\Roaming\Typora\typora-user-images\image-20220922010624066.png" alt="image-20220922010624066"></p><p>理解多余的逗号（在脚本运行时会被如何处理）的含义，对于从语言层面理解 JavaScript 是十分重要的。但是，在你自己写代码时：<strong>显式地将缺失的元素声明为<code>undefined</code>，将大大提高你的代码的清晰度和可维护性</strong>。</p><h3 id="布尔字面量-Boolean-literals"><a href="#布尔字面量-Boolean-literals" class="headerlink" title="布尔字面量 (Boolean literals)"></a>布尔字面量 (Boolean literals)</h3><p>（译注：即逻辑字面量）</p><p>布尔类型有两种字面量：<code>true</code>和<code>false</code>。</p><p>不要混淆作为布尔对象的真和假与布尔类型的原始值 true 和 false。布尔对象是原始布尔数据类型的一个包装器。参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean">布尔对象</a>。</p><h3 id="数字字面量"><a href="#数字字面量" class="headerlink" title="数字字面量"></a>数字字面量</h3><p>JavaScript 数字字面量包括多种基数的整数字面量和以 10 为基数的浮点数字面量</p><p>值得一提的是，语言标准要求数字字面量必须是无符号的。但是像<code>-123.4</code>这样的代码片段还是没有问题的，会被解释为一元操作符<code>-</code>应用于数字字面量<code>123.4</code></p><h4 id="整数字面量"><a href="#整数字面量" class="headerlink" title="整数字面量"></a>整数字面量</h4><p>整数可以用十进制（基数为 10）、十六进制（基数为 16）、八进制（基数为 8）以及二进制（基数为 2）表示。</p><ul><li>十进制整数字面量由一串数字序列组成，且没有前缀 0。</li><li>八进制的整数以 0（或 0O、0o）开头，只能包括数字 0-7。</li><li>十六进制整数以 0x（或 0X）开头，可以包含数字（0-9）和字母 a~f 或 A~F。</li><li>二进制整数以 0b（或 0B）开头，只能包含数字 0 和 1。</li></ul><p>严格模式下，八进制整数字面量必须以 0o 或 0O 开头，而不能以 0 开头。</p><p>整数字面量举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>, <span class="number">117</span> and -<span class="number">345</span> (十进制，基数为 <span class="number">10</span>)</span><br><span class="line"><span class="number">015</span>, <span class="number">0001</span> and -<span class="number">0o77</span> (八进制，基数为 <span class="number">8</span>)</span><br><span class="line"><span class="number">0x1123</span>, <span class="number">0x00111</span> and -<span class="number">0xF1A7</span> (十六进制，基数为 <span class="number">16</span> 或<span class="string">&quot;hex&quot;</span>)</span><br><span class="line"><span class="number">0b11</span>, <span class="number">0b0011</span> and -<span class="number">0b11</span> (二进制，基数为 <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="浮点数字面量"><a href="#浮点数字面量" class="headerlink" title="浮点数字面量"></a>浮点数字面量</h4><p>浮点数字面值可以有以下的组成部分：</p><ul><li>一个十进制整数，可以带正负号（即前缀“+”或“ - ”），</li><li>小数点（“.”），</li><li>小数部分（由一串十进制数表示），</li><li>指数部分。</li></ul><p>指数部分以“e”或“E”开头，后面跟着一个整数，可以有正负号（即前缀“+”或“-”）。浮点数字面量至少有一位数字，而且必须带小数点或者“e”（大写“E”也可）。</p><p>简言之，其语法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(+|-)][digits][.<span class="property">digits</span>][(E|e)[(+|-)]digits]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line">-<span class="number">.2345789</span> <span class="comment">// -0.23456789</span></span><br><span class="line">-<span class="number">3.12e+12</span>  <span class="comment">// -3.12*10^12</span></span><br><span class="line"><span class="number">.1e-23</span>    <span class="comment">// 0.1*10^(-23)=10^(-24)=1e-24</span></span><br></pre></td></tr></table></figure><h3 id="对象字面量-Object-literals"><a href="#对象字面量-Object-literals" class="headerlink" title="对象字面量 (Object literals)"></a>对象字面量 (Object literals)</h3><p>对象字面值是封闭在花括号对 ({}) 中的一个对象的零个或多个”属性名 - 值”对的（元素）列表。</p><p><strong>警告：</strong> 你不能在一条语句的开头就使用对象字面值，这将导致错误或产生超出预料的行为， 因为此时左花括号（{）会被认为是一个语句块的起始符号。（译者：这 里需要对语句 statement、块 block 等基本名词的解释）</p><p>以下是一个对象字面值的例子。对象<code>car</code>的第一个元素（译注：即一个属性/值对）定义了属性<code>myCar</code>；第二个元素，属性<code>getCar</code>，引用了一个函数调用（即 CarTypes(“Honda”)）；第三个元素，属性<code>special</code>，使用了一个已有的变量（即 Sales）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Sales</span> = <span class="string">&quot;Toyota&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CarTypes</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (name === <span class="string">&quot;Honda&quot;</span>) ?</span><br><span class="line">    name :</span><br><span class="line">    <span class="string">&quot;Sorry, we don&#x27;t sell &quot;</span> + name + <span class="string">&quot;.&quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = &#123; <span class="attr">myCar</span>: <span class="string">&quot;Saturn&quot;</span>, <span class="attr">getCar</span>: <span class="title class_">CarTypes</span>(<span class="string">&quot;Honda&quot;</span>), <span class="attr">special</span>: <span class="title class_">Sales</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">myCar</span>);   <span class="comment">// Saturn</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">getCar</span>);  <span class="comment">// Honda</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">special</span>); <span class="comment">// Toyota</span></span><br></pre></td></tr></table></figure><p>更进一步的，你可以使用数字或字符串字面值作为属性的名字，或者在另一个字面值内嵌套上一个字面值。如下的示例中使用了这些可选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123; <span class="attr">manyCars</span>: &#123;<span class="attr">a</span>: <span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;Jeep&quot;</span>&#125;, <span class="number">7</span>: <span class="string">&quot;Mazda&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">manyCars</span>.<span class="property">b</span>); <span class="comment">// Jeep</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car[<span class="number">7</span>]); <span class="comment">// Mazda</span></span><br></pre></td></tr></table></figure><p>对象属性名字可以是任意字符串，包括空串。如果对象属性名字不是合法的 javascript 标识符，它必须用””包裹。属性的名字不合法，那么便不能用。访问属性值，而是通过类数组标记 (“[]”) 访问和赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unusualPropertyNames = &#123;</span><br><span class="line">  <span class="string">&quot;&quot;</span>: <span class="string">&quot;An empty string&quot;</span>,</span><br><span class="line">  <span class="string">&quot;!&quot;</span>: <span class="string">&quot;Bang!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unusualPropertyNames.<span class="string">&quot;&quot;</span>);   <span class="comment">// 语法错误: Unexpected string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unusualPropertyNames[<span class="string">&quot;&quot;</span>]);  <span class="comment">// An empty string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unusualPropertyNames.!);    <span class="comment">// 语法错误: Unexpected token !</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unusualPropertyNames[<span class="string">&quot;!&quot;</span>]); <span class="comment">// Bang!</span></span><br></pre></td></tr></table></figure><h4 id="增强的对象字面量-Enhanced-Object-literals"><a href="#增强的对象字面量-Enhanced-Object-literals" class="headerlink" title="增强的对象字面量 (Enhanced Object literals)"></a>增强的对象字面量 (Enhanced Object literals)</h4><p>在 ES2015，对象字面值扩展支持在创建时设置原型，简写了 foo: foo 形式的属性赋值，方法定义，支持父方法调用，以及使用表达式动态计算属性名。总之，这些也使对象字面值和类声明更加紧密地联系起来，让基于对象的设计从这些便利中更加受益。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// __proto__</span></span><br><span class="line">    <span class="attr">__proto__</span>: theProtoObj,</span><br><span class="line">    <span class="comment">// Shorthand for ‘handler: handler’</span></span><br><span class="line">    handler,</span><br><span class="line">    <span class="comment">// Methods</span></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// Super calls</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;d &quot;</span> + <span class="variable language_">super</span>.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Computed (dynamic) property names</span></span><br><span class="line">    [ <span class="string">&#x27;prop_&#x27;</span> + (<span class="function">() =&gt;</span> <span class="number">42</span>)() ]: <span class="number">42</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请注意：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">a</span>: <span class="string">&quot;alpha&quot;</span>, <span class="number">2</span>: <span class="string">&quot;two&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">a</span>);    <span class="comment">// alpha</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo[<span class="number">2</span>]);   <span class="comment">// two</span></span><br><span class="line"><span class="comment">//console.log(foo.2);  // SyntaxError: missing ) after argument list</span></span><br><span class="line"><span class="comment">//console.log(foo[a]); // ReferenceError: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo[<span class="string">&quot;a&quot;</span>]); <span class="comment">// alpha</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo[<span class="string">&quot;2&quot;</span>]); <span class="comment">// two</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-字面值"><a href="#RegExp-字面值" class="headerlink" title="RegExp 字面值"></a>RegExp 字面值</h3><p>一个正则表达式是字符被斜线（译注：正斜杠“/”）围成的表达式。下面是一个正则表达式文字的一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串字面量-String-literals"><a href="#字符串字面量-String-literals" class="headerlink" title="字符串字面量 (String literals)"></a>字符串字面量 (String literals)</h3><p>字符串字面量是由双引号（”）对或单引号（’）括起来的零个或多个字符。字符串被限定在同种引号之间；也即，必须是成对单引号或成对双引号。下面的例子都是字符串字面值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="string">&quot;1234&quot;</span></span><br><span class="line"><span class="string">&quot;one line \n another line&quot;</span></span><br><span class="line"><span class="string">&quot;John&#x27;s cat&quot;</span></span><br></pre></td></tr></table></figure><p>你可以在字符串字面值上使用字符串对象的所有方法——JavaScript 会自动将字符串字面值转换为一个临时字符串对象，调用该方法，然后废弃掉那个临时的字符串对象。你也能用对字符串字面值使用类似 String.length 的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;John&#x27;s cat&quot;</span>.<span class="property">length</span>)</span><br><span class="line"><span class="comment">// 将打印字符串中的字符个数（包括空格）</span></span><br><span class="line"><span class="comment">// 结果为：10</span></span><br></pre></td></tr></table></figure><p>在 ES2015 中，还提供了一种<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals">模板字面量</a>，模板字符串提供了一些语法糖来帮你构造字符串。这与 Perl、Python 还有其他语言中的字符串插值（string  interpolation）的特性非常相似。除此之外，你可以在通过模板字符串前添加一个 tag  来自定义模板字符串的解析过程，这可以用来防止注入攻击，或者用来建立基于字符串的高级数据抽象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic literal string creation</span></span><br><span class="line"><span class="string">`In JavaScript &#x27;\n&#x27; is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiline strings</span></span><br><span class="line"><span class="string">`In JavaScript this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String interpolation</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Bob&quot;</span>, time = <span class="string">&quot;today&quot;</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct an HTTP request prefix is used to interpret the replacements and construction</span></span><br><span class="line"><span class="variable constant_">POST</span><span class="string">`http://foo.org/bar?a=<span class="subst">$&#123;a&#125;</span>&amp;b=<span class="subst">$&#123;b&#125;</span></span></span><br><span class="line"><span class="string">     Content-Type: application/json</span></span><br><span class="line"><span class="string">     X-Credentials: <span class="subst">$&#123;credentials&#125;</span></span></span><br><span class="line"><span class="string">     &#123; &quot;foo&quot;: <span class="subst">$&#123;foo&#125;</span>,</span></span><br><span class="line"><span class="string">       &quot;bar&quot;: <span class="subst">$&#123;bar&#125;</span>&#125;`</span>(myOnReadyStateChangeHandler);</span><br></pre></td></tr></table></figure><p>除非有特别需要使用字符串对象，否则，你应当始终使用字符串字面值。要查看字符串对象的有关细节，请参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide#string_object">字符串对象</a>。</p><h4 id="在字符串中使用的特殊字符"><a href="#在字符串中使用的特殊字符" class="headerlink" title="在字符串中使用的特殊字符"></a>在字符串中使用的特殊字符</h4><p>作为一般字符的扩展，你可以在字符串中使用特殊字符，如下例所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;one line \n another line&quot;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\D3Rtu\AppData\Roaming\Typora\typora-user-images\image-20220922012719779.png" alt="image-20220922012719779"></p><p>以下表格列举了你能在 JavaScript 的字符串中使用的特殊字符。</p><div class="table-container"><table><thead><tr><th>字符</th><th>意思</th></tr></thead><tbody><tr><td>\0</td><td>Null 字节</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>Tab (制表符)</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\’</td><td>单引号</td></tr><tr><td>\”</td><td>双引号</td></tr><tr><td>\</td><td>反斜杠字符（\）</td></tr><tr><td>*XXX*</td><td>由从 0 到 377 最多三位八进制数<em>XXX</em>表示的 Latin-1 字符。例如，\251 是版权符号的八进制序列。</td></tr><tr><td>\x<em>XX</em></td><td>由从 00 和 FF 的两位十六进制数字 XX 表示的 Latin-1 字符。例如，\ xA9 是版权符号的十六进制序列。</td></tr><tr><td><em>\uXXXX</em></td><td>由四位十六进制数字 XXXX 表示的 Unicode 字符。例如，\ u00A9 是版权符号的 Unicode 序列。见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals">Unicode escape sequences</a> (Unicode 转义字符).</td></tr><tr><td>\u<em>{XXXXX}</em></td><td>Unicode 代码点 (code point) 转义字符。例如，\u{2F804} 相当于 Unicode 转义字符 \uD87E\uDC04 的简写。</td></tr></tbody></table></div><p>译注：严格模式下，不能使用八进制转义字符。</p><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>对于那些未出现在表 2.1 中的字符，其所带的前导反斜线’\’将被忽略。但是，这一用法已被废弃，应当避免使用。</p><p>通过在引号前加上反斜线’\’，可以在字符串中插入引号，这就是<em>引号转义</em>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quote = <span class="string">&quot;He read \&quot;The Cremation of Sam McGee\&quot; by R.W. Service.&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(quote);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\D3Rtu\AppData\Roaming\Typora\typora-user-images\image-20220922012852965.png" alt="image-20220922012852965"></p><p>要在字符串中插入’\’字面值，必须转义反斜线。例如，要把文件路径 c:\temp 赋值给一个字符串，可以采用如下方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = <span class="string">&quot;c:\\temp&quot;</span>;</span><br></pre></td></tr></table></figure><p>也可以在换行之前加上反斜线以转义换行（译注：实际上就是一条语句拆成多行书写），这样反斜线和换行都不会出现在字符串的值中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;this string \</span></span><br><span class="line"><span class="string">is broken \</span></span><br><span class="line"><span class="string">across multiple\</span></span><br><span class="line"><span class="string">lines.&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);   <span class="comment">// this string is broken across multiplelines.</span></span><br></pre></td></tr></table></figure><p>Javascript 没有“heredoc”语法，但可以用行末的换行符转义和转义的换行来近似实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> poem =</span><br><span class="line"><span class="string">&quot;Roses are red,\n\</span></span><br><span class="line"><span class="string">Violets are blue.\n\</span></span><br><span class="line"><span class="string">Sugar is sweet,\n\</span></span><br><span class="line"><span class="string">and so is foo.&quot;</span></span><br></pre></td></tr></table></figure><p>ECMAScript 2015 增加了一种新的字面量，叫做模板字面量 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals">template literals</a>。</strong>它包含一些新特征，包括了多行字符串！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> poem =</span><br><span class="line"><span class="string">`Roses are red,</span></span><br><span class="line"><span class="string">Violets are blue.</span></span><br><span class="line"><span class="string">Sugar is sweet,</span></span><br><span class="line"><span class="string">and so is foo.`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准文章头使用方法模板</title>
      <link href="/posts/d2d895e5.html"/>
      <url>/posts/d2d895e5.html</url>
      
        <content type="html"><![CDATA[<pre><code>---title:【必需】文章标题date: 【必需】文章创建日期updated:【可选】文章更新日期tags:【可选】文章标题categories:【可选】文章分类keywords:【可选】文章关键字description:【可选】文章描述top_img:【可选】文章顶部图片comments:【可选】显示文章评论模块(默认 true)cover:【可选】覆盖默认图片(如果沒有设置top_img,文章页顶部將显示縮略图，可设为false/图片地址/留空) toc:【可选】显示文章TOC(默认为设置中toc的enable配置)toc_number:【可选】显示toc_number(默认为设置中toc的number配置)toc_style_simple:【可选】显示 toc 简洁模式copyright:【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)copyright_author:【可选】文章版权模块的文章作者copyright_author_href:【可选】文章版权模块的文章作者鏈接copyright_url:【可选】文章版权模块的文章链接copyright_info:【可选】文章版权模块的版权声明文字mathjax:【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认false)katex:【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)aplayer:【可选】在需要的页面加載aplayer的js和css,請參考文章下面的音乐 配置highlight_shrink:【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)aside:【可选】显示侧边栏 (默認 true)---</code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章书写模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: 'ZhuZiAYuanJWD';  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  .bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme='dark'] .card-widget {    background: #121212 !important;  }    [data-theme='dark'] div#post {    background: #121212 !important;  }    [data-theme='dark'] div#tag {    background: #121212 !important;  }    [data-theme='dark'] div#archive {    background: #121212 !important;  }    [data-theme='dark'] div#page {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #49b1f5;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url('/img/x1.cur'), auto;  }  a,  [type='button']:not(:disabled),  [type='reset']:not(:disabled),  [type='submit']:not(:disabled),  button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }    ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>小说</title>
      <link href="/novel/index.html"/>
      <url>/novel/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
