<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB学习笔记</title>
      <link href="/posts/a36562d7.html"/>
      <url>/posts/a36562d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><p>[TOC]</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>MongoDB为非关系型数据库 （no sql , not only sql）</li><li>为快速开发互联网web应用而设计的数据库系统</li><li>MongoDB的设计目的是极简、灵活、作为web应用栈的一部分。</li><li>MongoDB的数据模型是面向文档的，所谓文档是一种类似于JSON的结构，简单理解MongoDB这个数据库中存的是各种各样的JSON。(BSON )</li><li>默认端口27017</li></ul><h2 id="下载安装与配置环境启动"><a href="#下载安装与配置环境启动" class="headerlink" title="下载安装与配置环境启动"></a>下载安装与配置环境启动</h2><p><a href="https://www.mongodb.com/try/download/community2">下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>windows直接下一步到底 doge</p><p><strong>linux：</strong></p><h3 id="配置环境启动"><a href="#配置环境启动" class="headerlink" title="配置环境启动"></a>配置环境启动</h3><h4 id="windows配置环境变量"><a href="#windows配置环境变量" class="headerlink" title="windows配置环境变量"></a>windows配置环境变量</h4><p>1.将bin目录添加到path中</p><p>2.cmd中可以运行mongod</p><p>3.<code>mongod --dbpath ***</code>修改数据库路径</p><p>4.<code>mongod --port</code>  修改端口</p><h2 id="MongoDB基本使用"><a href="#MongoDB基本使用" class="headerlink" title="MongoDB基本使用"></a>MongoDB基本使用</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><ul><li>show dbs 显示所有数据库</li><li>use 数据库名   进入指定数据库</li><li>db   显示当前数据库</li><li>show collections  显示当前数据库中所有集合</li></ul><h3 id="增删改查CRUD"><a href="#增删改查CRUD" class="headerlink" title="增删改查CRUD"></a>增删改查CRUD</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p><code>db.&lt;collection&gt;.insert(doc)</code>向集合中插入一个文档</p><p>例如：</p><p><code>db.stus.insert (fname:&quot;孙悟空&quot; , age: 18,gender:&quot;男&quot;)</code></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><code>db.&lt;collection&gt;.find()</code></p><h2 id="python操作MongoDB"><a href="#python操作MongoDB" class="headerlink" title="python操作MongoDB"></a>python操作MongoDB</h2><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><p><code>pip install pymongo</code></p><h3 id="创建MongoDB连接"><a href="#创建MongoDB连接" class="headerlink" title="创建MongoDB连接"></a>创建MongoDB连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment"># 连接数据库方法一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mongodb_init01</span>():</span><br><span class="line">    mongo =pymongo.MongoClient(host=<span class="string">&#x27;&#x27;</span>,post=<span class="number">27017</span>,tz_aware=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mongodb_init02</span>():</span><br><span class="line">    url = <span class="string">&quot;host=&#x27;&#x27;,post=27017&quot;</span></span><br><span class="line">    mongo = pymongo.MongoClient(url,tz_aware=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_db</span>():</span><br><span class="line">    <span class="comment">#创建或者选择数据库</span></span><br><span class="line">    db = mongo.test           <span class="comment">#创建一个库连接</span></span><br><span class="line">    db.user.insert(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;) <span class="comment"># 加入数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除数据库</span></span><br><span class="line">    mongo.drop_database(db) <span class="comment"># 将上面创建的db库删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取数据库</span></span><br><span class="line">    mongo.list_database_names()  <span class="comment">#获取所有数据库</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="操作集合"><a href="#操作集合" class="headerlink" title="操作集合"></a>操作集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_collection</span>():</span><br><span class="line">    <span class="comment"># 获取数据库（没有自动创建 创建前提数据库中加集合）</span></span><br><span class="line">    db = mongo.test2</span><br><span class="line">    <span class="comment"># 创建集合</span></span><br><span class="line">    col = db.create_collection(<span class="string">&#x27;col&#x27;</span>)  <span class="comment"># 如果集合存在报错</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取一个集合</span></span><br><span class="line">    <span class="comment"># col = db.get_collection(&#x27;col&#x27;) #获取集合，如果没有会自动创建集合</span></span><br><span class="line">    col =db.col <span class="comment">#获取集合，如果没有会自动创建集合</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取所有集合名称</span></span><br><span class="line">    mongo.test2.list_collection_names()</span><br><span class="line">    <span class="comment"># 获取所有集合对象</span></span><br><span class="line">    mongo.test2.list_collections()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除集合</span></span><br><span class="line">    db.drop_collection(<span class="string">&#x27;col&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="操作索引"><a href="#操作索引" class="headerlink" title="操作索引"></a>操作索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_index</span>():</span><br><span class="line">    <span class="comment"># 获取集合</span></span><br><span class="line">    user = mongo.test.user</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建索引 默认正序 名字默认是属性_1</span></span><br><span class="line">    i = user.create_index(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建索引 添加排序规则</span></span><br><span class="line">    i = user.create_index([(<span class="string">&#x27;name&#x27;</span>,pymongo.DESCENDING)])  <span class="comment"># 倒叙</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建多个索引</span></span><br><span class="line">    user_id_index =IndexModel([(<span class="string">&#x27;user_id&#x27;</span>,pymongo.ASCENDTING)],unique=TRUE)</span><br><span class="line">    name_index = IndexModel([(<span class="string">&#x27;name&#x27;</span>,pymongo.DESCENDING)])</span><br><span class="line">    r = users.create_indexes([user_id_index,name_index]) <span class="comment"># 返回索引名称的list</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除索引</span></span><br><span class="line">    user.drop_indexes()</span><br></pre></td></tr></table></figure><h3 id="操作文档"><a href="#操作文档" class="headerlink" title="操作文档"></a>操作文档</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handler_document</span>():</span><br><span class="line">    <span class="comment"># 创建数据库与集合</span></span><br><span class="line">    col = mongo.test.col</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加数据</span></span><br><span class="line">    col.insert(&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 插入多条数据</span></span><br><span class="line">    user1 = &#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">    user2 = &#123;<span class="string">&quot;_id&quot;</span>:<span class="number">2</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;25&quot;</span>&#125;</span><br><span class="line">    col.insert_naby([user1,user2])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改数据</span></span><br><span class="line">    <span class="comment"># 修改单条数据</span></span><br><span class="line">    user1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">    upt = col.update_one(<span class="built_in">filter</span>=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>&#125;,update=&#123;<span class="string">&quot;$set&quot;</span>:user&#125;)     <span class="built_in">print</span>(upt.acknowledged,upt.matched_count,upt.modifined_count,</span><br><span class="line">                                                                                       upt.raw_result,upt.upserted_id)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    del_u =col.delete_one(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsa&quot;</span>&#125;) <span class="comment"># 删除zhangsa</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h2 id="MongoDBCompass使用"><a href="#MongoDBCompass使用" class="headerlink" title="MongoDBCompass使用"></a>MongoDBCompass使用</h2>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准文章头使用方法模板</title>
      <link href="/posts/d2d895e5.html"/>
      <url>/posts/d2d895e5.html</url>
      
        <content type="html"><![CDATA[<pre><code>---title:【必需】文章标题date: 【必需】文章创建日期updated:【可选】文章更新日期tags:【可选】文章标题categories:【可选】文章分类keywords:【可选】文章关键字description:【可选】文章描述top_img:【可选】文章顶部图片comments:【可选】显示文章评论模块(默认 true)cover:【可选】覆盖默认图片(如果沒有设置top_img,文章页顶部將显示縮略图，可设为false/图片地址/留空) toc:【可选】显示文章TOC(默认为设置中toc的enable配置)toc_number:【可选】显示toc_number(默认为设置中toc的number配置)toc_style_simple:【可选】显示 toc 简洁模式copyright:【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)copyright_author:【可选】文章版权模块的文章作者copyright_author_href:【可选】文章版权模块的文章作者鏈接copyright_url:【可选】文章版权模块的文章链接copyright_info:【可选】文章版权模块的版权声明文字mathjax:【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认false)katex:【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)aplayer:【可选】在需要的页面加載aplayer的js和css,請參考文章下面的音乐 配置highlight_shrink:【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)aside:【可选】显示侧边栏 (默認 true)---</code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章书写模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>小说</title>
      <link href="/novel/index.html"/>
      <url>/novel/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: 'ZhuZiAYuanJWD';  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  .bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme='dark'] .card-widget {    background: #121212 !important;  }    [data-theme='dark'] div#post {    background: #121212 !important;  }    [data-theme='dark'] div#tag {    background: #121212 !important;  }    [data-theme='dark'] div#archive {    background: #121212 !important;  }    [data-theme='dark'] div#page {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #49b1f5;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url('/img/x1.cur'), auto;  }  a,  [type='button']:not(:disabled),  [type='reset']:not(:disabled),  [type='submit']:not(:disabled),  button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }    ]]></content>
      
    </entry>
    
    
  
</search>
